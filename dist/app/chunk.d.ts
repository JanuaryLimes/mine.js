import ndarray from 'ndarray';
import { BufferGeometry, Mesh } from 'three';
import { Coords2, Coords3 } from '../libs';
import { Engine } from './engine';
declare type ChunkOptions = {
    size: number;
    maxHeight: number;
    dimension: number;
    padding: number;
};
declare class Chunk {
    engine: Engine;
    coords: Coords2;
    voxels: ndarray;
    heightMap: ndarray;
    name: string;
    size: number;
    maxHeight: number;
    dimension: number;
    padding: number;
    width: number;
    minInner: Coords3;
    minOuter: Coords3;
    maxInner: Coords3;
    maxOuter: Coords3;
    geometry: BufferGeometry;
    mesh: Mesh;
    altMesh: Mesh | undefined;
    isEmpty: boolean;
    isDirty: boolean;
    isAdded: boolean;
    isMeshing: boolean;
    isInitialized: boolean;
    isPending: boolean;
    constructor(engine: Engine, coords: Coords2, { size, dimension, padding, maxHeight }: ChunkOptions);
    getLocal(lx: number, ly: number, lz: number): number;
    setLocal(lx: number, ly: number, lz: number, id: number): number;
    getMaxHeightLocal(lx: number, lz: number): number;
    getMaxHeight(vx: number, vz: number): number;
    getVoxel(vx: number, vy: number, vz: number): number | undefined;
    setVoxel(vx: number, vy: number, vz: number, id: number): void;
    contains(vx: number, vy: number, vz: number, padding?: number): boolean;
    distTo(vx: number, _: number, vz: number): number;
    addToScene(): void;
    removeFromScene(): void;
    dispose(): void;
    initialized(): Promise<void>;
    buildMesh(): Promise<void>;
    private toLocal;
}
export { Chunk };
