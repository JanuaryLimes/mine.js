datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())

  username String @unique
  email String @unique
  password String

  settings Settings?
  worlds World[]

  updatedAt DateTime @updatedAt
  createdAt DateTime
}

model Player  {
  id Int @id @default(autoincrement())

  isAdmin Boolean @default(false)
  lastLogin DateTime @updatedAt
  x Float
  y Float
  z Float
  dirx Float 
  dirY Float
  health Int
  armor Int
  hunger Int

  userId Int
  user User @relation(fields: [userId], references: [id])

  worldId Int
  world World @relation(fields: [worldId], references: [id])

  inventory Inventory?

  gamemode Gamemode
}

model World {
  id Int @id @default(autoincrement())

  name String
  seed String
  time Float
  timeChanger Float
  days Int
  lastPlayed DateTime

  type WorldType @default(DEFAULT)

  changedBlocks Block[]
  players Player[]
  messages Message[]
}

model Message {
  id Int @id @default(autoincrement())

  sender String?
  body String

  worldId Int
  world World @relation(fields: [worldId], references: [id])

  type MessageType
}

model Block {
  id Int @id @default(autoincrement())

  representation String
  type Int
  x Int
  y Int
  z Int

  worldId Int
  world World @relation(fields: [worldId], references: [id])
}

model Settings {
  id Int @id @default(autoincrement())

  renderDistance Int @default(2)

  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Inventory {
  id Int @id @default(autoincrement())

  cursor Int
  data String

  playerId Int
  player Player @relation(fields: [playerId], references: [id])
}

enum Gamemode {
  SURVIVAL
  CREATIVE
  ADVENTURE
  SPECTATOR
}

enum MessageType {
  ERROR
  PLAYER
  SERVER
  INFO
}

enum WorldType {
  DEFAULT
  SUPERFLAT
}
